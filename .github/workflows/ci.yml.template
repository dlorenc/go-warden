name: CI

on:
  push:
    branches:
    - main
    tags:
    - 'v*'
  pull_request: {}

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.15'

      - name: run Go unit tests
        run: make test

  e2e-tests:
    needs: unit-tests
    runs-on: ubuntu-latest
    env:
      WASM_BINARY_NAME: policy.wasm
    steps:
      #############################
      # Preparing the environment
      #############################
      - uses: actions/checkout@v2

      - name: Download policy-testdrive
        uses: i3h/download-release-asset@v1
        with:
          owner: kubewarden
          repo: policy-server
          tag: v0.1.1
          file: policy-testdrive-linux-amd64

      - name: Setup BATS
        uses: mig4/setup-bats@v1
        with:
          bats-version: 1.2.1

      #############################
      # Building the Wasm module
      #############################

      # TODO: uncomment once tinygo 0.18.0 is released
      #-
      #  name: Install tinygo
      #  run: |
      #    wget https://github.com/tinygo-org/tinygo/releases/download/v0.17.0/tinygo_0.17.0_amd64.deb
      #    sudo dpkg -i tinygo_0.17.0_amd64.deb
      #-
      #  name: Build Wasm module
      #  run: |
      #    tinygo build -o ingress-policy.wasm -target=wasi -no-debug .
      - name: build policy
        uses: docker://ghcr.io/kubewarden/tinygo/tinygo-dev:w14-2021
        with:
          args: tinygo build -o ${{ env.WASM_BINARY_NAME }} -target=wasi -no-debug .


      #############################
      # Test Wasm module
      #############################
      - name: run e2e tests
        run: |
          chmod 755 policy-testdrive-linux-amd64
          ln -s policy-testdrive-linux-amd64 policy-testdrive
          PATH=${PWD}:${PATH} make e2e-tests

      #############################
      # Upload policy as an artifact
      #############################
      - name: upload wasm policy as an artifact
        uses: actions/upload-artifact@v2
        if: github.event.workflow_run.event != 'pull_request'
        with:
          name: policy.wasm
          path: ${{ env.WASM_BINARY_NAME }}
          if-no-files-found: error

  push-to-oci-registry:
    needs: e2e-tests
    if: github.event.workflow_run.event != 'pull_request'
    runs-on: ubuntu-latest
    env:
      OCI_TARGET: #TODO: change to something like ghcr.io/kubewarden/policies/safe-labels

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: policy.wasm

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download wasm-to-oci
        uses: i3h/download-release-asset@v1
        with:
          owner: engineerd
          repo: wasm-to-oci
          tag: v0.1.1
          file: linux-amd64-wasm-to-oci
      - name: fix wasm-to-oci permissions
        run: |
          chmod 755 linux-amd64-wasm-to-oci

      - name: Publish Wasm policy artifact to OCI registry with the 'latest' tag
        if: startsWith(github.ref, 'refs/heads/')
        run: |
          ./linux-amd64-wasm-to-oci push policy.wasm ${OCI_TARGET}:latest

      - name: Publish Wasm policy artifact to OCI registry with the version tag and 'latest'
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          export OCI_TAG=$(echo $GITHUB_REF | sed -e "s|refs/tags/||")
          ./linux-amd64-wasm-to-oci push policy.wasm ${OCI_TARGET}:${OCI_TAG}

  release:
    needs: e2e-tests
    if: ${{ github.event.workflow_run.event != 'pull_request' && startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: policy.wasm

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: policy.wasm
          asset_name: policy.wasm
          asset_content_type: application/wasm

      - name: Notify policy-hub
        uses: kubewarden/notify-policy-hub@main
        with:
          USERNAME: chimera-kube-bot
          PAT: ${{ secrets.WORKFLOW_PAT }}
